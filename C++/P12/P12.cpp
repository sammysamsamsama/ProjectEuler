/* 
 * The sequence of triangle numbers is generated by adding the natural 
 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 
 * = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five 
 * divisors.
 * 
 * What is the value of the first triangle number to have over five 
 * hundred divisors?
 *
 */

#include <iostream>
#include <fstream>
#include <cmath>
using namespace std;

int main() {
	int step = 0; // natural number
	int triangle_number = 0; // current triangle number
	int divisors = 0; // number of divisors of triangle_number
	
	cout << "triangle number | divisors" << endl;
	
	while (divisors < 500) {
		step++;
		triangle_number += step;
		divisors = 0;
		int square_root = (int)sqrt(triangle_number);
		
		/* +2 divisors for every divisor below square_root
		 * +1 divisors if square_root is a natural number
		 * 
		 * triangle_number = 16
		 * 	square_root = 4
		 * 	divisors: 1, 2, 4, 8, 16
		 */
		for (int i = 1; i < square_root; i++) {
			if (triangle_number % i == 0) {
				divisors += 2;
			}
		}
		if (square_root * square_root  == triangle_number) {
			divisors += 1;
		}
		
		cout << triangle_number << " | " << divisors << endl;
	}
	
	cout << "First triangle number to have over 500 divisors: " << triangle_number << endl;
	
	return 0;
}

